@using TellarknightApp.Services
@using TellarknightApp.Models
@using CommunityToolkit.Maui
@using System.Text
@using CommunityToolkit.Maui.Storage
@using CommunityToolkit.Maui.Alerts
@inject SupportedCards supportedCards
@inject Decklist decklist
@inject IFileSaver FileSaver

<div class="app-grid-container">
    <div class="item grid-search">
        <div class="grid-search-container">
            <div class="grid-search-1">
                <input id="searchQuery" type="text" class="search-input" @bind="searchQuery" />
            </div>
            <div class="size grid-search-2">
                <button class="btn btn-primary" @onclick="CardSearch">Search</button>
            </div>
            <div class="grid-search-3">
                <select @onchange="HandleTypeChange" style="height: 100%; width: 100%;">
                    <option value="" selected>Type/Role</option>
                    <option value="Monster">Monster</option>
                    <option value="Spell">Spell</option>
                    <option value="Trap">Trap</option>
                    <option value="Extender">Extender</option>
                    <option value="Hand Trap">Hand Trap</option>
                </select>
            </div>
            <div class="grid-search-4">
                <select @onchange="HandleArchetypeChange" style="height: 100%; width: 100%;">
                    <option value="" selected>Archetype</option>
                    <option value="None">None</option>
                    <option value="Tellarknight">Tellarknight</option>
                    <option value="Constellar">Constellar</option>
                    <option value="Zefra">Zefra</option>
                    <option value="SHS">SHS</option>
                    <option value="Ryzeal">Ryzeal</option>
                    <option value="Centur-Ion">Centur-Ion</option>
                    <option value="Runick">Runick</option>
                    <option value="Kashtira">Kashtira</option>
                    <option value="Mathmech">Mathmech</option>
                </select>
            </div>

            <div class="grid-search-5">
                <button class="btn btn-danger" @onclick="DecklistButton">
                    @(select ? "View Decklist" : "Select Cards")
                </button>
            </div>
            <div class="grid-search-6">
                <button class="btn btn-secondary" @onclick="SaveFile">Export YDK</button>
            </div>
        </div>
    </div>

    <div class="grid-cards">
        @if (select)
        {
            var filteredCards = supportedCards.Cards
            .Where(x => string.IsNullOrWhiteSpace(searchQuery) || x.Name.Contains(searchQuery))
            .Where(x => string.IsNullOrWhiteSpace(archetypeQuery) || x.Archetype.Contains(archetypeQuery))
            .Where(x => string.IsNullOrWhiteSpace(typeQuery) ||
            (typeQuery == "Monster" ? (x.Type != "Spell" && x.Type != "Field Spell" && x.Type != "Trap") :
            (typeQuery == "Spell (includes Field Spell)" ? (x.Type == "Spell" || x.Type == "Field Spell") :
            (typeQuery == "Extender" ? x.Role == "Extender" :
            (typeQuery == "Hand Trap" ? x.Role == "Hand Trap" : x.Type == typeQuery)))))
            .ToList();


            totalItems = filteredCards.Count;
            var pagedCards = filteredCards
            .Skip((currentPage - 1) * itemsPerPage)
            .Take(itemsPerPage);

            <div class="card-container">
                @foreach (Card card in pagedCards)
                {
                    <div class="grid-item">
                        <img src="@card.Image" alt="@card.Name" class="item-image" title="@GenerateCardTooltip(card)" />
                        <div class="quantity-control">
                            <button class="btn-quantity" @onclick="() => DecreaseQuantity(card)">-</button>
                            <input type="text" class="item-input" @bind="card.Quantity" />
                            <button class="btn-quantity" @onclick="() => IncreaseQuantity(card)">+</button>
                        </div>
                    </div>
                }
            </div>

            <div style="display: flex; justify-content: center;">
                <hr style="width: 90%;" />
            </div>

            <div style="display: flex; justify-content: center; align-items: center;">
                <button class="btn-primary"
                        style="width: 12.5%; height: 40px;"
                        @onclick="PreviousPage"
                        disabled="@(currentPage == 1)">
                    Previous Page
                </button>
                <p style="font-size: clamp(12px, 1.5vw, 36px); margin: 0; line-height: 40px; padding: 0 2%;">
                    @($"{currentPage}/{(totalItems + itemsPerPage - 1) / itemsPerPage}")
                </p>
                <button class="btn-primary"
                        style="width: 12.5%; height: 40px;"
                        @onclick="NextPage"
                        disabled="@(currentPage * itemsPerPage >= totalItems)">
                    Next Page
                </button>
            </div>

            <div style="display: flex; justify-content: center;">
                <hr style="width: 90%;" />
            </div>
        }
        else
        {
            <div class="card-container">
                @foreach (Card card in decklist.MainDeck.Where(x => x.Type != "Spell" && x.Type != "Field Spell" && x.Type != "Trap" && x is not EmptyCard && x.Role != "Extra Deck"))
                {
                    <div class="grid-item">
                        <img src="@card.Image" alt="@card.Name" class="item-image" title="@GenerateCardTooltip(card)" />
                    </div>
                }
                @foreach (Card card in decklist.MainDeck.Where(x => (x.Type == "Spell" || x.Type == "Field Spell")))
                {
                    <div class="grid-item">
                        <img src="@card.Image" alt="@card.Name" class="item-image" title="@GenerateCardTooltip(card)" />
                    </div>
                }
                @foreach (Card card in decklist.MainDeck.Where(x => x.Type == "Trap"))
                {
                    <div class="grid-item">
                        <img src="@card.Image" alt="@card.Name" class="item-image" title="@GenerateCardTooltip(card)" />
                    </div>
                }
                @foreach (Card card in decklist.ExtraDeck)
                {
                    <div class="grid-item">
                        <img src="@card.Image" alt="@card.Name" class="item-image" title="@GenerateCardTooltip(card)" />
                    </div>
                }
                @foreach (Card card in decklist.MainDeck.Where(x => x is EmptyCard))
                {
                    <div class="grid-item">
                        <img src="@card.Image" alt="@card.Name" class="item-image" title="@GenerateCardTooltip(card)" />
                    </div>
                }
            </div>
        }
    </div>
</div>


@code {
    [Parameter]
    public EventCallback UpdateState { get; set; }
    private string searchQuery = string.Empty;
    private string typeQuery = string.Empty;
    private string archetypeQuery = string.Empty;
    private bool select = true;
    private List<string> optionsType = new List<string>
    {
        "Monster",
        "Spell",
        "Trap",
    };

    private int currentPage = 1;
    private const int itemsPerPage = 30;
    private int totalItems;
    private string GenerateCardTooltip(Card card)
    {
        var tooltipLines = new List<string>
    {
        $"Name: {card.Name}",
        $"Type: {card.Type}"
    };
        if (!string.IsNullOrWhiteSpace(card.Attribute))
        {
            tooltipLines.Add($"Attribute: {card.Attribute}");
        }
        if (card.Level.HasValue && card.Role != "Extra Deck")
        {
            tooltipLines.Add($"Level: {card.Level.Value}");
        }
        if (card.Level.HasValue && card.Role == "Extra Deck")
        {
            tooltipLines.Add($"Level/Rank: {card.Level.Value}");
        }
        if (card.Attack.HasValue || card.Defense.HasValue)
        {
            tooltipLines.Add($"ATK/DEF: {(card.Attack?.ToString() ?? "N/A")}/{(card.Defense?.ToString() ?? "N/A")}");
        }
        if (card.Scale.HasValue)
        {
            tooltipLines.Add($"Scale: {card.Scale.Value}");
        }

        tooltipLines.Add($"Archetype: {(card.Archetype != null ? string.Join(", ", card.Archetype) : "N/A")}");

        return string.Join("\n", tooltipLines);
    }

    private void HandleTypeChange(ChangeEventArgs e)
    {
        typeQuery = e.Value?.ToString();
        CardSearch();
    }

    private void HandleArchetypeChange(ChangeEventArgs e)
    {
        archetypeQuery = e.Value?.ToString();
        CardSearch();
    }

    public void DecklistButton()
    {
        select = !select;
        decklist.BuildDecklist(supportedCards);        
    }

    public async void CardSearch()
    {
        totalItems = supportedCards.Cards
            .Where(x => string.IsNullOrWhiteSpace(searchQuery) ? true : x.Name.Contains(searchQuery))
            .Where(x => string.IsNullOrWhiteSpace(archetypeQuery) ? true : x.Archetype.Contains(archetypeQuery))
            .Where(x => string.IsNullOrWhiteSpace(typeQuery) ? true : (typeQuery == "Monster" ? (x.Type != "Spell" && x.Type != "Trap") : x.Type == typeQuery))
            .Count();

        currentPage = 1;
        await OnInitializedAsync();
    }

    public void IncreaseQuantity(Card card)
    {
        card.Quantity++;
    }

    public void DecreaseQuantity(Card card)
    {
        card.Quantity--;
    }

    protected override async Task OnInitializedAsync()
    {
        supportedCards.Action += StateHasChanged;
        decklist.Action += StateHasChanged;
    }

    private void NextPage()
    {
        if (currentPage * itemsPerPage < totalItems)
            currentPage++;
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
            currentPage--;
    }

    private string GenerateYdk()
    {
        decklist.BuildDecklist(supportedCards);
        var sb = new StringBuilder();

        sb.AppendLine("#main");
        foreach (var card in decklist.MainDeck.Where(x => x.Role != "Extra Deck" && x.Id != 0))
        {
            sb.AppendLine(card.Id.ToString());
        }

        sb.AppendLine("#extra");
        foreach (var card in decklist.ExtraDeck.Where(x => x.Id != 0))
        {
            sb.AppendLine(card.Id.ToString());
        }

        sb.AppendLine("!side");

        return sb.ToString();
    }

    async Task SaveFile()
    {
        using var filecontent = new MemoryStream(Encoding.UTF8.GetBytes(GenerateYdk()));
        var fileSaverResult = await FileSaver.SaveAsync("tellarknight.ydk", filecontent);

        if (fileSaverResult.IsSuccessful)
        {
            await Toast.Make($"The file was saved successfully to location: {fileSaverResult.FilePath}").Show();
        }
        else
        {
            await Toast.Make($"The file was not saved successfully with error: {fileSaverResult.Exception.Message}").Show();
        }
    }


}
